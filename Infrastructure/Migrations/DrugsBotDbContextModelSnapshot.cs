// <auto-generated />
using System;
using DrugsApt.Infrastructure.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DrugsBotDbContext))]
    partial class DrugsBotDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DrugsApt.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasAnnotation("Comment", "Код страны");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Comment", "Страна");

                    b.HasKey("Id")
                        .HasAnnotation("Comment", null);

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DrugsApt.Domain.Entities.Drug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CountryCodeId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasAnnotation("Comment", "Код страны");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Comment", "Производитель");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasAnnotation("Comment", "Наименование");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("DrugsApt.Domain.Entities.DrugItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasMaxLength(5)
                        .HasColumnType("double precision")
                        .HasAnnotation("Сomment", "Кол-во");

                    b.Property<Guid>("DrugId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Сomment", "Id лекарства");

                    b.Property<Guid>("DrugStoreId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Сomment", "Id Аптеки");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasAnnotation("Сomment", "Цена");

                    b.HasKey("Id")
                        .HasAnnotation("Сomment", null);

                    b.HasIndex("DrugId");

                    b.HasIndex("DrugStoreId");

                    b.ToTable("DrugItems");
                });

            modelBuilder.Entity("DrugsApt.Domain.Entities.DrugStore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DrugNetwork")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Comment", null);

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Comment", "Номер телефона");

                    b.HasKey("Id")
                        .HasAnnotation("Comment", null);

                    b.ToTable("DrugStores");
                });

            modelBuilder.Entity("DrugsApt.Domain.Entities.FavoriteDrug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DrugId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Сomment", "идентификатор препарата");

                    b.Property<Guid?>("DrugStoreId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Сomment", "идентификатор аптеки");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Сomment", "идентификатор профиля");

                    b.HasKey("Id")
                        .HasAnnotation("Сomment", null);

                    b.HasIndex("DrugId");

                    b.HasIndex("DrugStoreId");

                    b.HasIndex("ProfileId");

                    b.ToTable("FavoriteDrugs");
                });

            modelBuilder.Entity("DrugsApt.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ExteranlId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Сomment", "внешний идентификатор");

                    b.HasKey("Id")
                        .HasAnnotation("Сomment", null);

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("DrugsApt.Domain.Entities.Drug", b =>
                {
                    b.HasOne("DrugsApt.Domain.Entities.Country", "Country")
                        .WithMany("Drugs")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DrugsApt.Domain.Entities.DrugItem", b =>
                {
                    b.HasOne("DrugsApt.Domain.Entities.Drug", "Drug")
                        .WithMany("DrugItems")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrugsApt.Domain.Entities.DrugStore", "DrugStore")
                        .WithMany("DrugItems")
                        .HasForeignKey("DrugStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("DrugStore");
                });

            modelBuilder.Entity("DrugsApt.Domain.Entities.DrugStore", b =>
                {
                    b.OwnsOne("DrugsApt.Domain.ValueObject.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("DrugStoreId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasAnnotation("Comment", "Город");

                            b1.Property<int>("House")
                                .HasColumnType("integer")
                                .HasAnnotation("Сomment", "Дом");

                            b1.Property<int>("PostalCode")
                                .HasColumnType("integer")
                                .HasAnnotation("Сomment", "почтовый индекс");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasAnnotation("Comment", "Улица");

                            b1.HasKey("DrugStoreId");

                            b1.ToTable("DrugStores");

                            b1.WithOwner()
                                .HasForeignKey("DrugStoreId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("DrugsApt.Domain.Entities.FavoriteDrug", b =>
                {
                    b.HasOne("DrugsApt.Domain.Entities.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrugsApt.Domain.Entities.DrugStore", "DrugStore")
                        .WithMany()
                        .HasForeignKey("DrugStoreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DrugsApt.Domain.Entities.Profile", "Profile")
                        .WithMany("FavoriteDrugs")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("DrugStore");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DrugsApt.Domain.Entities.Profile", b =>
                {
                    b.OwnsOne("DrugsApt.Domain.ValueObject.EmailAddress", "Email", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasAnnotation("Сomment", null);

                            b1.HasKey("ProfileId");

                            b1.ToTable("Profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("DrugsApt.Domain.Entities.Country", b =>
                {
                    b.Navigation("Drugs");
                });

            modelBuilder.Entity("DrugsApt.Domain.Entities.Drug", b =>
                {
                    b.Navigation("DrugItems");
                });

            modelBuilder.Entity("DrugsApt.Domain.Entities.DrugStore", b =>
                {
                    b.Navigation("DrugItems");
                });

            modelBuilder.Entity("DrugsApt.Domain.Entities.Profile", b =>
                {
                    b.Navigation("FavoriteDrugs");
                });
#pragma warning restore 612, 618
        }
    }
}
